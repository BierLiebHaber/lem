(defpackage :lem-markdown-mode/syntax-parser
  (:use :cl :lem)
  (:export :make-syntax-parser
           :scan-buffer))
(in-package :lem-markdown-mode/syntax-parser)

(defclass syntax-parser () ())

(defun make-syntax-parser ()
  (make-instance 'syntax-parser))

(defmethod lem/buffer/internal::%syntax-scan-region ((parser syntax-parser) start end)
  (scan-region start end))

(defun put-line-attribute (point attribute)
  (with-point ((start point)
               (end point))
    (line-start start)
    (line-end end)
    (put-text-property start end :attribute attribute)))

(defun scan-code-block (point end)
  (let* ((groups (nth-value 1 (looking-at point "^```(.*)")))
         (language-name (and groups (elt groups 0)))
         (syntax-table (get-syntax-table-by-mode-name language-name)))
    (line-offset point 1)
    (with-point ((start point))
      (loop :while (point< point end)
            :until (looking-at point "^```")
            :while (line-offset point 1))
      (if syntax-table
          (syntax-scan-region start point :syntax-table syntax-table :recursive-check nil)
          (put-text-property start point :attribute 'syntax-string-attribute)))))

(defun scan-region (start end)
  (with-point ((point start))
    (loop :while (point< point end)
          :do (cond ((looking-at point "^#")
                     (put-line-attribute point 'syntax-constant-attribute))
                    ((looking-at point "^>")
                     (put-line-attribute point 'syntax-string-attribute))
                    ((looking-at point "^\\s*[-*+]")
                     (back-to-indentation point)
                     (with-point ((start point)
                                  (end point))
                       (character-offset end 1)
                       (put-text-property start end :attribute 'syntax-keyword-attribute)))
                    ((looking-at point "^\\s*(?:\\d)+\\.\\s")
                     (back-to-indentation point)
                     (with-point ((start point)
                                  (end point))
                       (skip-chars-forward end #'digit-char-p)
                       (character-offset end 1)
                       (put-text-property start end :attribute 'syntax-keyword-attribute)))
                    ((looking-at point "^```")
                     (scan-code-block point end)))
          :while (line-offset point 1))))
